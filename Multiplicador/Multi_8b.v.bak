module Multi_8b (
    input wire clk,
    input wire reset,
    input wire start,
    input wire [7:0] multiplicando,
    input wire [7:0] multiplicador,
    output wire [15:0] produto,
    output wire pronto
);

    // Registradores
    reg [7:0] reg_A;      // Registro para o multiplicando
    reg [7:0] reg_B;      // Registro para o multiplicador
    reg [15:0] reg_P;     // Registro para o produto parcial
    reg [3:0] contador;   // Contador de iterações (8 bits = 8 iterações)
    
    // Máquina de estados
    reg [1:0] estado;
    localparam ESPERA = 2'b00;
    localparam OPERACAO = 2'b01;
    localparam PRONTO = 2'b10;
    
    // Lógica de controle
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            estado <= ESPERA;
            reg_A <= 8'b0;
            reg_B <= 8'b0;
            reg_P <= 16'b0;
            contador <= 4'b0;
        end else begin
            case (estado)
                ESPERA: begin
                    if (start) begin
                        reg_A <= multiplicando;
                        reg_B <= multiplicador;
                        reg_P <= 16'b0;
                        contador <= 4'b0;
                        estado <= OPERACAO;
                    end
                end
                
                OPERACAO: begin
                    if (reg_B[0] == 1'b1) begin
                        reg_P[15:8] <= reg_P[15:8] + reg_A;
                    end
                    
                    // Deslocamento à direita do registrador B
                    reg_B <= {1'b0, reg_B[7:1]};
                    
                    // Deslocamento à esquerda do registrador A
                    reg_A <= {reg_A[6:0], 1'b0};
                    
                    contador <= contador + 1;
                    
                    if (contador == 4'b0111) begin
                        estado <= PRONTO;
                    end
                end
                
                PRONTO: begin
                    estado <= ESPERA;
                end
            endcase
        end
    end
    
    // Saídas
    assign produto = (estado == PRONTO) ? reg_P : 16'b0;
    assign pronto = (estado == PRONTO);
    
endmodule